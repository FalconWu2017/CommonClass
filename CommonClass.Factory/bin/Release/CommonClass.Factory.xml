<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonClass.Factory</name>
    </assembly>
    <members>
        <member name="T:CommonClass.Factory.FactoryOption">
            <summary>
            IOC工厂操作选项
            </summary>
        </member>
        <member name="P:CommonClass.Factory.FactoryOption.InitOption">
            <summary>
            初始化选项
            </summary>
        </member>
        <member name="P:CommonClass.Factory.FactoryOption.DefaultUseCallingAssembly">
            <summary>
            默认使用注册调用方程序集
            </summary>
        </member>
        <member name="T:CommonClass.Factory.InitOptionEnum">
            <summary>
            IOC工厂初始化选项
            </summary>
        </member>
        <member name="F:CommonClass.Factory.InitOptionEnum.BuildContainerBuilder">
            <summary>
            只创建容器生成器
            </summary>
        </member>
        <member name="F:CommonClass.Factory.InitOptionEnum.BuildContainer">
            <summary>
            创建容器
            </summary>
        </member>
        <member name="F:CommonClass.Factory.InitOptionEnum.All">
            <summary>
            创建容器生成器和容器
            </summary>
        </member>
        <member name="T:CommonClass.Factory.IOCFactory">
            <summary>
            IOC工厂
            </summary>
        </member>
        <member name="E:CommonClass.Factory.IOCFactory.BeforeRegister">
            <summary>
            在容器创建之前，类型注册之前发送的事件
            </summary>
        </member>
        <member name="E:CommonClass.Factory.IOCFactory.BeforeBuild">
            <summary>
            在容器创建之前，所有类型注册之后发送的事件
            </summary>
        </member>
        <member name="E:CommonClass.Factory.IOCFactory.OnBuild">
            <summary>
            在容器生成之后发生
            </summary>
        </member>
        <member name="E:CommonClass.Factory.IOCFactory.BeforeDisposeContainer">
            <summary>
            销毁容器之前发送的事件
            </summary>
        </member>
        <member name="E:CommonClass.Factory.IOCFactory.OnDisposeContainer">
            <summary>
            容器销毁完成
            </summary>
        </member>
        <member name="P:CommonClass.Factory.IOCFactory.Builder">
            <summary>
            容器创建器
            </summary>
        </member>
        <member name="P:CommonClass.Factory.IOCFactory.Container">
            <summary>
            注册容器
            </summary>
        </member>
        <member name="P:CommonClass.Factory.IOCFactory.Assemblies">
            <summary>
            注册的程序集范围
            </summary>
        </member>
        <member name="P:CommonClass.Factory.IOCFactory.Option">
            <summary>
            IOC工厂选项
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.#ctor">
            <summary>
            只在调用方程序集中寻找注册类型
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.#ctor(System.Reflection.Assembly[])">
            <summary>
            在给定的程序集中寻找注册
            </summary>
            <param name="assemblies">指定要寻找的程序集</param>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.#ctor(System.String[])">
            <summary>
            通过提供程序集注册其中类型
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.#ctor(CommonClass.Factory.FactoryOption,System.String[])">
            <summary>
            提供初始化操作选项和，程序集构造IOC工厂
            </summary>
            <param name="option">工厂选项</param>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.#ctor(CommonClass.Factory.FactoryOption,System.Reflection.Assembly[])">
            <summary>
            通过提供工厂选项和程序集构造IOC工厂
            </summary>
            <param name="option">工厂选项</param>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.Init">
            <summary>
            初始化类型容器
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.DisposeContainer">
            <summary>
            销毁容器
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.ToAssenbly(System.String[])">
            <summary>
            将程序集名称集合转换为程序集集合
            </summary>
            <param name="assemblyNames">程序集名称集合</param>
            <returns>程序集集合</returns>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.RegisterByIRegister(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            注册实现IRegister接口的类型
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.RegisterByInterface(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            通过接口实现注册
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.RegisterByAttribute(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            通过IocRegisterAttribute实现注册
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.getTypes``1(System.Reflection.Assembly)">
            <summary>
            获取程序集实现了T类型的所有对象类型
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IOCFactory.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:CommonClass.Factory.IocRegisterAttribute">
            <summary>
            表示将对象注册到IOC容器，并可选提供注册选项
            </summary>
        </member>
        <member name="P:CommonClass.Factory.IocRegisterAttribute.Option">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IocRegisterAttribute.#ctor">
            <summary>
            使用默认选项注册对象
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IocRegisterAttribute.#ctor(CommonClass.Factory.RegisterOption)">
            <summary>
            通过注册选项注册对象
            </summary>
            <param name="option"></param>
        </member>
        <member name="T:CommonClass.Factory.IRegister">
            <summary>
            类型注册接口，需要引入Autofac名字空间，然后自己实现注册方法
            </summary>
        </member>
        <member name="M:CommonClass.Factory.IRegister.Register(Autofac.ContainerBuilder)">
            <summary>
            利用ContainerBuilder组件注册服务
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:CommonClass.Factory.IRegisterBaseInterface">
            <summary>
            实现该接口表示类型要注册到其实现的基础接口。
            </summary>
        </member>
        <member name="T:CommonClass.Factory.IRegisterSelf">
            <summary>
            表示类型将注册到自己本身的类型
            </summary>
        </member>
        <member name="T:CommonClass.Factory.IRegisterSingleBase">
            <summary>
            表示类型注册到基础接口，并实现单例模式
            </summary>
        </member>
        <member name="T:CommonClass.Factory.RegisterOption">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="F:CommonClass.Factory.RegisterOption.BaseInterface">
            <summary>
            注册到基础接口
            </summary>
        </member>
        <member name="F:CommonClass.Factory.RegisterOption.Self">
            <summary>
            注册到自身
            </summary>
        </member>
        <member name="F:CommonClass.Factory.RegisterOption.Single">
            <summary>
            注册为单例模式
            </summary>
        </member>
        <member name="F:CommonClass.Factory.RegisterOption.PropertyDI">
            <summary>
            需要支持属性注入
            </summary>
        </member>
        <member name="F:CommonClass.Factory.RegisterOption.Default">
            <summary>
            默认。注册到基础接口
            </summary>
        </member>
        <member name="F:CommonClass.Factory.RegisterOption.BaseSingle">
            <summary>
            注册到基础接口并实现单例
            </summary>
        </member>
        <member name="F:CommonClass.Factory.RegisterOption.Standard">
            <summary>
            标准注入。类将注册到其实现的接口，并且为单例模式和支持属性注入
            </summary>
        </member>
    </members>
</doc>
