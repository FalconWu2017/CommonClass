<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonClass.DataStructure</name>
    </assembly>
    <members>
        <member name="T:CommonClass.DataStructure.IsChild`1">
            <summary>
            泛型委托，比较一个节点是否为另一个节点的子节点
            </summary>
            <typeparam name="T">节点的数据类型</typeparam>
            <param name="father">可能的父节点</param>
            <param name="child">可能的子节点</param>
            <returns>如果True将作为子节点，否则不是</returns>
        </member>
        <member name="M:CommonClass.DataStructure.Tree`1.fromList1(System.Collections.Generic.IEnumerable{`0},CommonClass.DataStructure.TreeNode{`0},CommonClass.DataStructure.IsChild{`0})">
            <summary>
            将列表数据转换为树数据
            </summary>
            <param name="list">列表数据</param>
            <param name="root">一个根，如果传入null，返回一个新的根。</param>
            <param name="isChild">判断第二个对象是否为第一个对象子节点的方法</param>
            <returns>树根</returns>
        </member>
        <member name="M:CommonClass.DataStructure.Tree`1.AddChild(CommonClass.DataStructure.TreeNode{`0},`0)">
            <summary>
            添加子节点
            </summary>
            <param name="father">父节点</param>
            <param name="data">子节点的数据</param>
            <returns>添加的子节点</returns>
        </member>
        <member name="T:CommonClass.DataStructure.TreeNode`1">
            <summary>
            树节点
            </summary>
            <typeparam name="T">节点数据类型</typeparam>
        </member>
        <member name="P:CommonClass.DataStructure.TreeNode`1.Data">
            <summary>
            节点保存的数据
            </summary>
        </member>
        <member name="P:CommonClass.DataStructure.TreeNode`1.Father">
            <summary>
            树父节点
            </summary>
        </member>
        <member name="P:CommonClass.DataStructure.TreeNode`1.Children">
            <summary>
            树子节点
            </summary>
        </member>
    </members>
</doc>
